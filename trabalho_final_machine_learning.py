# -*- coding: utf-8 -*-
"""Trabalho final - Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jgrvzI6As7XJ6wy-b36vqEMPVjFgKmLP

1. Raspar API da Câmara
2. Tratar dados
3. Armazenar dados tratados
4. Inserir dados tratados no modelo de IA
5. Montar site
5. Inserir output no site

#Raspar API da Câmara
"""

import requests

lista_deputados = [
    {"nome": "Nikolas Ferreira", "numero": 209787},
    {"nome": "Boulos", "numero": 220639},
    {"nome": "Zambelli", "numero": 204507},
    {"nome": "Eduardo Bolsonaro", "numero": 92346},
    {"nome": "Luiz Carlos Hauly", "numero": 73778},
    {"nome": "Celso Russomanno", "numero": 73441},
    {"nome": "Kim Kataguiri", "numero": 204536},
    {"nome": "Tabata Amaral", "numero": 204534},
    {"nome": "Ricardo Salles", "numero": 220633},
    {"nome": "Delegado Bruno Lima", "numero": 220642}
]

infos_deputados = []

for deputado in lista_deputados:
    url = f'https://dadosabertos.camara.leg.br/api/v2/deputados/{deputado["numero"]}/discursos?dataInicio=2023-01-01&dataFim=2023-12-31&ordenarPor=dataHoraInicio&ordem=ASC'
    response = requests.get(url)
    discursos = response.json()['dados']

    # Armazenar as informações em um dicionário que inclui o nome do deputado e seus discursos
    infos_deputado = {
        "nome": deputado["nome"],
        "discursos": discursos
    }

    # Adicionar o dicionário à lista de infos_deputados
    infos_deputados.append(infos_deputado)

# 'infos_deputados' agora contém uma lista de dicionários, onde cada dicionário representa um deputado
# e tem uma chave 'discursos' que é uma lista dos discursos desse deputado.

infos_deputados[1]

"""#Armazenar dados no MongoDb"""

!pip install pymongo
from pymongo import MongoClient
mongodb_uri = 'mongodb://laura:dXrdqG6zRg3tv4nC@SG-insperdata-44537.servers.mongodirector.com:27017/mjd_laura?ssl=true'
db = MongoClient(mongodb_uri, ssl=True, tlsAllowInvalidCertificates=True)['mjd_laura']

for deputado in infos_deputados:
  nome = deputado["nome"]
  if db.deputados.find_one({"nome": nome}) is None:
    doc = deputado
    db.deputados.insert_one(doc)

"""#Tratar dados com IA"""

#resumos dos discursos
#palavras mais usadas
#temas mais frequentes
#lugares mais citados
#nomes mais citados

discursos_teste = db.deputados.find_one()['discursos']

discursos_teste

!pip install openai gspread oauth2client
from oauth2client.service_account import ServiceAccountCredentials
from openai import OpenAI

openai_api_key = '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'
client = OpenAI(api_key=openai_api_key)

resumos = []

for discurso in discursos_teste:
    fala = discurso['transcricao']
    pergunta = f'''Vou te passar um discurso de um deputado, delimitado por aspas triplas.
    Você deve me retornar um resumo desse discurso em até 200 toques, nomes próprios citados no discurso e cidades e/ou regiões do Brasil citadas pelo deputado.
    Exemplo:
    - Resumo: (...); Nomes próprios: (...); Regiões citadas: (...)
     """{fala}"""
        '''
    chat = client.chat.completions.create(
            messages=[{"role": "user", "content": pergunta}],
            model="gpt-3.5-turbo",
        )
    resposta = chat.choices[0].message.content

    print (resposta)

# Conta as ocorrências do termo
contador = 0
termo_busca = "governo"

for discurso in discursos['dados']:
  if termo_busca.lower() in discurso['transcricao'].lower():
            contador += 1
  print(f"O termo '{termo_busca}' apareceu {contador}x no discurso de {deputado} em {discurso['dataHoraInicio']} ")
else:
  print("Fim das buscas")